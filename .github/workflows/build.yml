name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '*'
      - '*/*'
      - '**'

jobs:
  build-windows-release:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

  #   - name: Declare github variables
  #     id: vars
  #     shell: bash
  #     run: |
  #       echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

  #   - name: Setup Python
  #     uses: actions/setup-python@v2
  #   - name: Setup Python
  #     uses: actions/setup-python@v2

  #   - name: Install CMake
  #     uses: lukka/get-cmake@v3.19.0
  #   - name: Install CMake
  #     uses: lukka/get-cmake@v3.19.0

  #   - name: Generate build files
  #     run: mkdir build && cd build && cmake .. -G "Visual Studio 16 2019" -A Win32
  #   - name: Generate build files
  #     run: mkdir build && cd build && cmake .. -G "Visual Studio 16 2019" -A Win32

  #   - name: Build
  #     run: |
  #       cd build
  #       cmake --build . --config Release
  #   - name: Build
  #     run: |
  #       cd build
  #       cmake --build . --config Release

  #   - name: Get current time
  #     uses: josStorer/get-current-time@v2
  #     id: current-time
  #     with:
  #       format: YYYYMMDD
  #   - name: Get current time
  #     uses: josStorer/get-current-time@v2
  #     id: current-time
  #     with:
  #       format: YYYYMMDD

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: streamer-win-release-${{ steps.current-time.outputs.formattedTime }}-${{ steps.vars.outputs.sha_short }}
        path: build/bin/Release
  build-windows-debug:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

  #   - name: Declare github variables
  #     id: vars
  #     shell: bash
  #     run: |
  #       echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

  #   - name: Setup Python
  #     uses: actions/setup-python@v2
  #   - name: Setup Python
  #     uses: actions/setup-python@v2

  #   - name: Install CMake
  #     uses: lukka/get-cmake@v3.19.0
  #   - name: Install CMake
  #     uses: lukka/get-cmake@v3.19.0

  #   - name: Generate build files
  #     run: mkdir build && cd build && cmake .. -G "Visual Studio 16 2019" -A Win32
  #   - name: Generate build files
  #     run: mkdir build && cd build && cmake .. -G "Visual Studio 16 2019" -A Win32

  #   - name: Build
  #     run: |
  #       cd build
  #       cmake --build . --config Debug
  #   - name: Build
  #     run: |
  #       cd build
  #       cmake --build . --config Debug

  #   - name: Get current time
  #     uses: josStorer/get-current-time@v2
  #     id: current-time
  #     with:
  #       format: YYYYMMDD
  #   - name: Get current time
  #     uses: josStorer/get-current-time@v2
  #     id: current-time
  #     with:
  #       format: YYYYMMDD

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: streamer-win-debug-${{ steps.current-time.outputs.formattedTime }}-${{ steps.vars.outputs.sha_short }}
        path: build/bin/Debug
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        config: [Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Declare github variables
      id: vars
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Build
      run: |
        cd docker
        CONFIG=${{ matrix.config == 'Debug' && 'Debug' || 'MinSizeRel' }} ./build.sh

    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time
      with:
        format: YYYYMMDD

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: streamer-linux-${{ matrix.config == 'Debug' && 'debug' || 'release' }}-${{ steps.current-time.outputs.formattedTime }}-${{ steps.vars.outputs.sha_short }}
        path: docker/build/bin
